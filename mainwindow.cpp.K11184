#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "aboutdialog.h"
#include "syntaxhighlighter.h"
#include "lex.h"
#include "interpreter.h"

boolean errorFree = true;

/**
 * Creates main window
 * @param parent window
 */
MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    this->showMaximized();

    ui->textEdit->setAutoFillBackground(true);
    ui->textEdit->setStyleSheet("color: QColor(255, 0, 0, 25); background-color:white; font: 12pt;");
    ui->textEdit->show();

    highlighter = new Highlighter(ui->textEdit->document());
}

MainWindow::~MainWindow()
{
    delete ui;
}

/**
 * Paste function
 */
void MainWindow::on_actionPaste_triggered()
{
    ui->textEdit->paste();
}

/**
 * Clear text
 */
void MainWindow::on_actionDelete_triggered()
{
    ui->textEdit->clear();
}

/**
 * Select all text
 */
void MainWindow::on_actionSelect_All_triggered()
{
    ui->textEdit->selectAll();
}

/**
 * Set background to white
 */
void MainWindow::on_actionDefault_Mode_triggered()
{

    ui->textEdit->setAutoFillBackground(true);
    ui->textEdit->setStyleSheet("color: darkCyan; background-color:white;font: 12pt;");
    ui->textEdit->show();
}

/**
 * Set background to grey
 */
void MainWindow::on_actionDark_Mode_triggered()
{
    ui->textEdit->setAutoFillBackground(true);
    ui->textEdit->setStyleSheet("color: QColor(255, 0, 0, 25); background-color:grey;font: 12pt;");
    ui->textEdit->show();
}

/**
 * Undo function
 */
void MainWindow::on_actionUndo_triggered()
{
    ui->textEdit->undo();
}

/**
 * Create new file
 */
void MainWindow::on_actionNew_triggered()
{
    mFilename = "";
    ui->textEdit->setPlainText("");
}

/**
 * Open file
 */
void MainWindow::on_actionOpen_triggered(){
    QString file = QFileDialog::getOpenFileName(this, "Open a file");

    if(!file.isEmpty()){
        QFile sFile(file);
        if(sFile.open(QFile::ReadOnly | QFile::Text)){
            mFilename = file;
            QTextStream in(&sFile);
            QString text = in.readAll();
            sFile.close();

            ui->textEdit->setPlainText(text);
        }
    }
}

/**
 * Save file
 */
void MainWindow::on_actionSave_triggered()
{
    if(mFilename == ""){
        on_actionSave_As_triggered();
        return;
    }

    QFile sFile(mFilename);
    if(sFile.open(QFile::WriteOnly | QFile::Text)){
        QTextStream out(&sFile);

        out << ui->textEdit->toPlainText();

        sFile.flush();
        sFile.close();
    }
}

/**
 * Save file as
 */
void MainWindow::on_actionSave_As_triggered()
{
    QString file = QFileDialog::getSaveFileName(this, "Open a file");

    if(!file.isEmpty()){
        mFilename = file;
        on_actionSave_triggered();
    }
}

/**
 * Exit
 */
void MainWindow::on_actionExit_triggered()
{
    exit(errno);
}

/**
 * Copy function
 */
void MainWindow::on_actionCopy_triggered()
{
    ui->textEdit->copy();
}

/**
 * Cut function
 */
void MainWindow::on_actionCut_triggered()
{
    ui->textEdit->cut();
}

/**
 * Redo function
 */
void MainWindow::on_actionRedo_triggered()
{
    ui->textEdit->redo();
}

/**
 * Opens "about" dialog
 */
void MainWindow::on_actionAbout_triggered()
{
    QDialog *about = new QDialog(0,0);
    about = new AboutDialog(this);
    about->show();
}

/**
 * Set text color to white
 */
void MainWindow::on_actionComment_Code_triggered()
{
    ui->textEdit->setAutoFillBackground(true);
    ui->textEdit->setStyleSheet("color: white; background-color:black;font: 12pt;");
    ui->textEdit->show();
}

/**
 * Parse the file
 */
void MainWindow::on_actionParse_triggered()
{
    int begin;
    int* errors;
    errorFree = true;
    QFile sFile("parse.txt");
    if(sFile.open(QFile::WriteOnly | QFile::Text)){
        QTextStream out(&sFile);
        out << ui->textEdit->toPlainText();
        sFile.flush();
        sFile.close();
    }
    lex.resetErrors();
    lex.parse("parse.txt");
    errors=lex.getErrors();

    QTextCharFormat fmt;
    fmt.setBackground(Qt::darkBlue);
    QTextCursor cursor(ui->textEdit->document());

    ui->textEdit->selectAll();
    ui->textEdit->setTextBackgroundColor(Qt::white);
    cursor.movePosition(QTextCursor::End);
    ui->textEdit->setTextCursor(cursor);

    for(int i = 0; i < 500; i++){
        begin = 0;
        if(errors[i] != -1){
            begin = errors[i];
            errorFree = false;
            cursor.setPosition(begin-1, QTextCursor::MoveAnchor);
            cursor.setPosition(begin, QTextCursor::KeepAnchor);
            cursor.setCharFormat(fmt);
        }
    }
    string line = lex.getLine();
    QString qLine = QString::fromStdString(line);
    ui->textEditConsole->setPlainText(qLine);
}

/**
 * Interprets the code
 */
void MainWindow::on_actionInterperate_triggered()
{
on_actionParse_triggered();

if(errorFree){
    printf("errorfree");
    QString data = ui->textEdit->toPlainText();
    QByteArray ba = data.toLocal8Bit();
    const char *dataP = (const char *)strdup(ba.constData());

    Interpreter inter;
    inter.setData(dataP);
    inter.evaluate();
}

}

/**
 * Output line to console
 * @param outputLine line to output
 */
void MainWindow::output(char outputLine){
    std::string line(1, outputLine);
    //string line = outputLine;
    QString qLine = QString::fromStdString(line);
    ui->textEditConsole->setPlainText(qLine);
}
